"""
This schema is only used to auto genrate the struct for the communication between the core and
the apps.
"""
scalar BloomMetadata
scalar UserConnection
scalar Group
scalar BillingPlanConnection
scalar User

####################################################################################################
## admin
####################################################################################################

type DashboardData {
  metadata: BloomMetadata
  users: UserConnection
}

####################################################################################################
## billing
####################################################################################################

"""
type MyBillingProfile struct {
	Me              *model.User                  `json:"me"`
	BillingPlans    *model.BillingPlanConnection `json:"billingPlans"`
	StripePublicKey string                       `json:"stripePublicKey"`
}

"""

type FetchGroupProfileParams {
  id: ID!
}

type GroupBillingProfile {
  group: Group
  billingPlans: BillingPlanConnection
  stripePublicKey: String
}

type UserBillingProfile {
	user: User
	billingPlans: BillingPlanConnection
}

type NewStripeCard {
	number:   String!
  expMonth: String!
  expYear: String!
  cvc: String!
}

type AddPaymentMethodParams {
  stripePublicKey: String
  groupId: ID
  card: NewStripeCard!
}

type MyBillingProfile {
  me: User
  billingPlans: BillingPlanConnection
  stripePublicKey: String!
}


####################################################################################################
## calculator
####################################################################################################

type CalcParams {
	expression: String!
}

type CalcResult {
 result: String!
}


####################################################################################################
## calendar
####################################################################################################

"""
type ListEventsParams struct {
	StartAt *time.Time `json:"startAt"`
	EndAt   *time.Time `json:"endAt"`
}

type Events struct {
	Events []Event `json:"events"`
}

type CreateEventParams struct {
	Title       string    `json:"title"`
	Description string    `json:"description"`
	StartAt     time.Time `json:"startAt"`
	EndAt       time.Time `json:"endAt"`
}

type DeleteEventParams struct {
	ID string `json:"id"`
}

"""



####################################################################################################
## contacts
####################################################################################################

"""
type Contacts struct {
	Contacts []Contact `json:"contacts"`
}

type CreateContactParams struct {
	DeviceID      string        `json:"deviceId"`
	FirstName     string        `json:"firstName"`
	LastName      string        `json:"lastName"`
	Notes         string        `json:"notes"`
	Birthday      *time.Time    `json:"birthday"`
	BloomUsername string        `json:"bloomUsername" db:"bloom_username"`
	Organizations Organizations `json:"organizations"`
	Addresses     Addresses     `json:"addresses"`
	Emails        Emails        `json:"emails"`
	Phones        Phones        `json:"phones"`
	Websites      Websites      `json:"websites"`
}

type DeleteContactParams struct {
	ID string `json:"id"`
}

"""


####################################################################################################
## groups
####################################################################################################



####################################################################################################
## kernel
####################################################################################################

type Empty {
  noop: Boolean
}


####################################################################################################
## notes
####################################################################################################

type CreateNoteParams {
  title: String!
  body: String!
  color: String!
}


####################################################################################################
## preferences
####################################################################################################


####################################################################################################
## users
####################################################################################################
