####################################################################################################
## Scalars & Enums
####################################################################################################

scalar Time
scalar Bytes
scalar Int64

enum SessionDeviceOS {
  LINUX
  MACOS
  WINDOWS
  ANDROID
  IOS
}

enum SessionDeviceType {
  TV
  CONSOLE
  MOBILE
  TABLET
  WATCH
  COMPUTER
  CAR
}

enum GroupMemberRole {
  ADMIN
  MEMBER
}

enum BillingPlanTier {
  FREE
  BASIC
  PRO
  ULTRA
}

####################################################################################################
## Queries & Types
####################################################################################################

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type User {
  id: ID
  createdAt: Time
  avatarUrl: String
  username: String!
  firstName: String
  lastName: String
  email: String
  displayName: String!
  bio: String!
  isAdmin: Boolean!
  groups: GroupConnection
  paymentMethods: PaymentMethodConnection
  invoices: InvoiceConnection
  sessions: SessionConnection
  groupInvitations: GroupInvitationConnection
  billingPlan: BillingPlan
}

type UserConnection {
  edges: [UserEdge]
  nodes: [User]
  pageInfo: PageInfo!
  totalCount: Int64!
}

type UserEdge {
  cursor: String!
  node: User
}


type PaymentMethod {
  id: ID!
  createdAt: Time!
  cardLast4: String!
  cardExpirationMonth: Int!
  cardExpirationYear: Int!
}

type PaymentMethodConnection {
  edges: [PaymentMethodEdge]
  nodes: [PaymentMethod]
  pageInfo: PageInfo!
  totalCount: Int64!
}

type PaymentMethodEdge {
  cursor: String!
  node: PaymentMethod
}


type Group {
  id: ID
  createdAt: Time
  name: String!
  description: String!
  members: [GroupMember!]
  invitations: [GroupInvitation!]
}

type GroupConnection {
  edges: [GroupEdge]
  nodes: [Group]
  pageInfo: PageInfo!
  totalCount: Int64!
}

type GroupEdge {
  cursor: String!
  node: Group
}


type GroupMember {
  user: User!
  role: GroupMemberRole!
}

type GroupMemberConnection {
  edges: [GroupMemberEdge]
  nodes: [GroupMember]
  pageInfo: PageInfo!
  totalCount: Int64!
}

type GroupMemberEdge {
  cursor: String!
  node: GroupMember
}


type GroupInvitation {
  id: ID!
  group: Group!
  inviter: User!
}

type GroupInvitationConnection {
  edges: [GroupInvitationEdge]
  nodes: [GroupInvitation]
  pageInfo: PageInfo!
  totalCount: Int64!
}

type GroupInvitationEdge {
  cursor: String!
  node: GroupInvitation
}


type Invoice {
  id: ID!
}

type InvoiceConnection {
  edges: [InvoiceEdge]
  nodes: [Invoice]
  pageInfo: PageInfo!
  totalCount: Int64!
}

type InvoiceEdge {
  cursor: String!
  node: Invoice
}


type BillingPlan {
  id: ID!
  price: Int64!
  name: String!
  description: String!
  isPublic: Boolean!
  tier: BillingPlanTier!
  storage: Int64!
  stripeId: String
  subscribers: UserConnection
}

type BillingPlanConnection {
  edges: [BillingPlanEdge]
  nodes: [BillingPlan]
  pageInfo: PageInfo!
  totalCount: Int64!
}

type BillingPlanEdge {
  cursor: String!
  node: BillingPlan
}


type Session {
  id: ID!
  createdAt: Time!
  token: String
  device: SessionDevice!
}

type SessionConnection {
  edges: [SessionEdge]
  nodes: [Session]
  pageInfo: PageInfo!
  totalCount: Int64!
}

type SessionEdge {
  cursor: String!
  node: Session
}


type SessionDevice {
  os: SessionDeviceOS!
  type: SessionDeviceType!
}


type RegistrationStarted {
  id: ID!
}


type SignedIn {
  session: Session!
  me: User!
}


type BloomMetadata {
  os: String!
  arch: String!
  version: String!
  gitCommit: String!
}

type Query {
  # Get information about current user
  me: User!
  user(username: String): User
  users: UserConnection
  group(id: ID!): Group
  groups: GroupConnection
  billingPlans: BillingPlanConnection
  metadata: BloomMetadata
  stripePublicKey: String
}

####################################################################################################
## Mutations & Inputs
####################################################################################################

input RegisterInput {
  displayName: String!
  email: String!
}

input VerifyRegistrationInput {
  id: ID!
  code: String!
}

input CompleteRegistrationInput {
  id: ID!
  username: String!
  authKey: Bytes!
  device: SessionDeviceInput!
}

input SessionDeviceInput {
  os: SessionDeviceOS!
  type: SessionDeviceType!
}

input SignInInput {
  username: String!
  authKey: Bytes!
  device: SessionDeviceInput!
}

input RevokeSessionInput {
  id: ID!
}

input SendNewRegistrationCodeInput {
  id: ID!
}

input CreateGroupInput {
  name: String!
  description: String!
  usersToInvite: [String!]!
}

input DeleteGroupInput {
  id: ID!
}

input GroupInput {
  id: ID!
  name: String!
  description: String!
}

input RemoveGroupMembersInput {
  id: ID!
  usernames: [String!]!
}

input AcceptGroupInvitationInput {
  id: ID!
}

input CancelGroupInvitationInput {
  id: ID!
}

input DeclineGroupInvitationInput {
  id: ID!
}

input InviteUsersInGroupInput {
  id: ID!
  usernames: [String!]!
}

input QuitGroupInput {
  id: ID!
}

input BillingPlanInput {
  id: ID
  name: String!
  tier: BillingPlanTier!
  stripeId: String!
  description: String!
  isPublic: Boolean!
  storage: Int64!
}

input DeleteBillingPlanInput {
  id: ID!
}

input ChangeBillingPlanInput {
  id: ID!
  userId: String
  groupId: String
}

input AddPaymentMethodInput {
  stripeId: String!
  groupId: String
}

input RemovePaymentMethodInput {
  id: ID!
}

input ChangeDefaultPaymentMethodInput {
  id: ID!
}

input UpdateUserProfileInput {
  id: ID
  displayName: String
  bio: String
  firstName: String
  lastName: String
}

type Mutation {
  # users
  register(input: RegisterInput!): RegistrationStarted!
  verifyRegistration(input: VerifyRegistrationInput!): Boolean!
  sendNewRegistrationCode(input: SendNewRegistrationCodeInput!): Boolean!
  completeRegistration(input: CompleteRegistrationInput!): SignedIn!
  signIn(input: SignInInput!):  SignedIn!
  revokeSession(input: RevokeSessionInput!): Boolean!
  updateUserProfile(input: UpdateUserProfileInput!): User!

  # groups
  createGroup(input: CreateGroupInput!): Group!
  deleteGroup(input: DeleteGroupInput!): Boolean!
  updateGroup(input: GroupInput!): Group!
  removeGroupMembers(input: RemoveGroupMembersInput!): Group!
  inviteUsersInGroup(input: InviteUsersInGroupInput!): Group!
  acceptGroupInvitation(input: AcceptGroupInvitationInput!): Boolean!
  declineGroupInvitation(input: DeclineGroupInvitationInput!): Boolean!
  cancelGroupInvitation(input: CancelGroupInvitationInput!): Boolean!
  quitGroup(input: QuitGroupInput!): Boolean!

  # billing
  createBillingPlan(input: BillingPlanInput!): BillingPlan!
  updateBillingPlan(input: BillingPlanInput!): BillingPlan!
  deleteBillingPlan(input: DeleteBillingPlanInput!): Boolean!
  changeBillingPlan(input: ChangeBillingPlanInput!): BillingPlan!
  addPaymentMethod(input: AddPaymentMethodInput!): PaymentMethod
  removePaymentMethod(input: RemovePaymentMethodInput!): Boolean!
  changeDefaultPaymentMethod(input: ChangeDefaultPaymentMethodInput!): PaymentMethod!
}
