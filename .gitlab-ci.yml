services:
  - docker:dind

stages:
  - test
  - build

include:
  template: Dependency-Scanning.gitlab-ci.yml

variables:
  # Rust (core)
  CARGO_HOME: $CI_PROJECT_DIR/cargo_home
  RUST_ENV: test
  RUST_VERSION: nightly-2019-09-13
  RUST_BACKTRACE: 1

  # Flutter (mobile)
  ANDROID_COMPILE_SDK: "28"
  ANDROID_BUILD_TOOLS: "28.0.2"
  ANDROID_SDK_TOOLS:   "4333796"
  FLUTTER_VERSION: "https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_v1.9.1+hotfix.2-stable.tar.xz"

  # NodeJS (desktop)
  NODE_ENV: test
  NODE_VERSION: lts


cache:
  paths:
    - cargo_home/
    - core/target/
    - desktop/node_modules/

####################################################################################################
## Test
####################################################################################################

test:core:
  stage: test
  image: 'rust:stretch'
  tags:
    - docker
  script:
    - apt update && apt install -y gcc make git libsodium-dev libc6-dev
    - rustup default $RUST_VERSION
    - rustup component add rustfmt clippy
    - cd core
    - make fmt_check
    - make lint
    - make test


test:mobile:
  stage: test
  image: openjdk:8-jdk
  tags:
    - docker
  script:
    - cd mobile
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1 build-essential
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
    - unzip -d android-sdk-linux android-sdk.zip
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    # temporarily disable checking for EPIPE error and use yes to accept all licenses
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail
    # flutter sdk setup
    - cd $HOME && wget --output-document=flutter-sdk.tar.xz $FLUTTER_VERSION
        && tar -xf flutter-sdk.tar.xz && export PATH=$PATH:$HOME/flutter/bin
        && cd -
    - echo flutter.sdk=$HOME/flutter > android/local.properties
    - chmod +x ./android/gradlew
    - flutter config --no-analytics
    - make fmt_check
    - make lint
    - make test

test:desktop:
  stage: test
  image: node:$NODE_VERSION
  tags:
    - docker
  script:
    - cd desktop
    - make install
    #- make test
    - make lint


####################################################################################################
## Build
####################################################################################################

# TODO

build:core:
  stage: build
  image: 'rust:stretch'
  tags:
    - docker
  script:
    - apt update && apt install -y gcc make git libsodium-dev libc6-dev
    - rustup default $RUST_VERSION
    - cd core
    - make build


build:desktop:
  stage: build
  image: node:$NODE_VERSION
  tags:
    - docker
  script:
    - cd desktop
    - make build

build:mobile:
  stage: build
  image: openjdk:8-jdk
  tags:
    - docker
  script:
    - cd mobile
    - apt-get --quiet update --yes
    - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1 build-essential
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
    - unzip -d android-sdk-linux android-sdk.zip
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    # temporarily disable checking for EPIPE error and use yes to accept all licenses
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail
    # flutter sdk setup
    - cd $HOME && wget --output-document=flutter-sdk.tar.xz $FLUTTER_VERSION
        && tar -xf flutter-sdk.tar.xz && export PATH=$PATH:$HOME/flutter/bin
        && cd -
    - echo flutter.sdk=$HOME/flutter > android/local.properties
    - chmod +x ./android/gradlew
    - flutter config --no-analytics
    - make build

# test:android:
#   stage: test
#   script:
#     - cd android
#     - ./gradlew -Pci --console=plain :app:testDebug

# build:apk:
#   stage: build
#   script:
#     - flutter build apk
#   artifacts:
#     paths:
#       - build/app/outputs/apk

# build:bundle:
#   stage: build
#   script:
#     - flutter build appbundle
#   artifacts:
#     paths:
#       - build/app/outputs/bundle
